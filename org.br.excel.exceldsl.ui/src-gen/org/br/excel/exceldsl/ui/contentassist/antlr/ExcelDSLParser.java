/*
* generated by Xtext
*/
package org.br.excel.exceldsl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.br.excel.exceldsl.services.ExcelDSLGrammarAccess;

public class ExcelDSLParser extends AbstractContentAssistParser {
	
	@Inject
	private ExcelDSLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.br.excel.exceldsl.ui.contentassist.antlr.internal.InternalExcelDSLParser createParser() {
		org.br.excel.exceldsl.ui.contentassist.antlr.internal.InternalExcelDSLParser result = new org.br.excel.exceldsl.ui.contentassist.antlr.internal.InternalExcelDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getOperatorAccess().getOperatorAlternatives_0(), "rule__Operator__OperatorAlternatives_0");
					put(grammarAccess.getBasicExpressionAccess().getAlternatives(), "rule__BasicExpression__Alternatives");
					put(grammarAccess.getPrimitiveAccess().getAlternatives(), "rule__Primitive__Alternatives");
					put(grammarAccess.getFloatAccess().getAlternatives_3(), "rule__Float__Alternatives_3");
					put(grammarAccess.getBooleanAccess().getAlternatives(), "rule__Boolean__Alternatives");
					put(grammarAccess.getDataTypeAccess().getDatatypeAlternatives_0(), "rule__DataType__DatatypeAlternatives_0");
					put(grammarAccess.getJavaClassAccess().getAlternatives_1(), "rule__JavaClass__Alternatives_1");
					put(grammarAccess.getExcelAccess().getGroup(), "rule__Excel__Group__0");
					put(grammarAccess.getStatementAccess().getGroup(), "rule__Statement__Group__0");
					put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
					put(grammarAccess.getExpressionAccess().getGroup_1(), "rule__Expression__Group_1__0");
					put(grammarAccess.getExpressionGroupAccess().getGroup(), "rule__ExpressionGroup__Group__0");
					put(grammarAccess.getDoubleAccess().getGroup(), "rule__Double__Group__0");
					put(grammarAccess.getFloatAccess().getGroup(), "rule__Float__Group__0");
					put(grammarAccess.getInBuiltFunctionCallAccess().getGroup(), "rule__InBuiltFunctionCall__Group__0");
					put(grammarAccess.getJavaClassAccess().getGroup(), "rule__JavaClass__Group__0");
					put(grammarAccess.getJavaMemberCallAccess().getGroup(), "rule__JavaMemberCall__Group__0");
					put(grammarAccess.getJavaMethodCallAccess().getGroup(), "rule__JavaMethodCall__Group__0");
					put(grammarAccess.getJavaMethodCallAccess().getGroup_2(), "rule__JavaMethodCall__Group_2__0");
					put(grammarAccess.getFunctionParametersAccess().getGroup(), "rule__FunctionParameters__Group__0");
					put(grammarAccess.getFunctionParametersAccess().getGroup_1(), "rule__FunctionParameters__Group_1__0");
					put(grammarAccess.getExcelAccess().getStatementsAssignment_0(), "rule__Excel__StatementsAssignment_0");
					put(grammarAccess.getExcelAccess().getExpressionAssignment_1(), "rule__Excel__ExpressionAssignment_1");
					put(grammarAccess.getStatementAccess().getDataTypeAssignment_0(), "rule__Statement__DataTypeAssignment_0");
					put(grammarAccess.getStatementAccess().getVariableAssignment_1(), "rule__Statement__VariableAssignment_1");
					put(grammarAccess.getStatementAccess().getExpressionAssignment_3(), "rule__Statement__ExpressionAssignment_3");
					put(grammarAccess.getExpressionAccess().getExpressionAssignment_0(), "rule__Expression__ExpressionAssignment_0");
					put(grammarAccess.getExpressionAccess().getOperatorAssignment_1_0(), "rule__Expression__OperatorAssignment_1_0");
					put(grammarAccess.getExpressionAccess().getExpressionAssignment_1_1(), "rule__Expression__ExpressionAssignment_1_1");
					put(grammarAccess.getOperatorAccess().getOperatorAssignment(), "rule__Operator__OperatorAssignment");
					put(grammarAccess.getBasicExpressionAccess().getPrimitiveAssignment_0(), "rule__BasicExpression__PrimitiveAssignment_0");
					put(grammarAccess.getBasicExpressionAccess().getVariableAssignment_1(), "rule__BasicExpression__VariableAssignment_1");
					put(grammarAccess.getBasicExpressionAccess().getInBuiltFunctionCallAssignment_2(), "rule__BasicExpression__InBuiltFunctionCallAssignment_2");
					put(grammarAccess.getBasicExpressionAccess().getJavaClassAssignment_3(), "rule__BasicExpression__JavaClassAssignment_3");
					put(grammarAccess.getBasicExpressionAccess().getExpressionGroupAssignment_4(), "rule__BasicExpression__ExpressionGroupAssignment_4");
					put(grammarAccess.getPrimitiveAccess().getStrValueAssignment_0(), "rule__Primitive__StrValueAssignment_0");
					put(grammarAccess.getPrimitiveAccess().getIntValueAssignment_1(), "rule__Primitive__IntValueAssignment_1");
					put(grammarAccess.getPrimitiveAccess().getDoubleValueAssignment_2(), "rule__Primitive__DoubleValueAssignment_2");
					put(grammarAccess.getPrimitiveAccess().getFloatValueAssignment_3(), "rule__Primitive__FloatValueAssignment_3");
					put(grammarAccess.getPrimitiveAccess().getBooleanValueAssignment_4(), "rule__Primitive__BooleanValueAssignment_4");
					put(grammarAccess.getDataTypeAccess().getDatatypeAssignment(), "rule__DataType__DatatypeAssignment");
					put(grammarAccess.getVariableAccess().getVariableNameAssignment(), "rule__Variable__VariableNameAssignment");
					put(grammarAccess.getInBuiltFunctionCallAccess().getExcelFunctionAssignment_0(), "rule__InBuiltFunctionCall__ExcelFunctionAssignment_0");
					put(grammarAccess.getInBuiltFunctionCallAccess().getFunctionParametersAssignment_2(), "rule__InBuiltFunctionCall__FunctionParametersAssignment_2");
					put(grammarAccess.getExcelFunctionAccess().getExcelFunctionNameAssignment(), "rule__ExcelFunction__ExcelFunctionNameAssignment");
					put(grammarAccess.getJavaClassAccess().getJavaObjectNameAssignment_0(), "rule__JavaClass__JavaObjectNameAssignment_0");
					put(grammarAccess.getJavaClassAccess().getJavaMemberCallAssignment_1_0(), "rule__JavaClass__JavaMemberCallAssignment_1_0");
					put(grammarAccess.getJavaClassAccess().getJavaMethodCallAssignment_1_1(), "rule__JavaClass__JavaMethodCallAssignment_1_1");
					put(grammarAccess.getJavaMemberCallAccess().getAccessNameAssignment_1(), "rule__JavaMemberCall__AccessNameAssignment_1");
					put(grammarAccess.getJavaMethodCallAccess().getAccessNameAssignment_1(), "rule__JavaMethodCall__AccessNameAssignment_1");
					put(grammarAccess.getJavaMethodCallAccess().getAccessNameAssignment_2_1(), "rule__JavaMethodCall__AccessNameAssignment_2_1");
					put(grammarAccess.getJavaMethodCallAccess().getFunctionParametersAssignment_4(), "rule__JavaMethodCall__FunctionParametersAssignment_4");
					put(grammarAccess.getJavaMethodCallAccess().getJavaMethodCallAssignment_6(), "rule__JavaMethodCall__JavaMethodCallAssignment_6");
					put(grammarAccess.getFunctionParametersAccess().getParameterAssignment_0(), "rule__FunctionParameters__ParameterAssignment_0");
					put(grammarAccess.getFunctionParametersAccess().getParameterAssignment_1_1(), "rule__FunctionParameters__ParameterAssignment_1_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.br.excel.exceldsl.ui.contentassist.antlr.internal.InternalExcelDSLParser typedParser = (org.br.excel.exceldsl.ui.contentassist.antlr.internal.InternalExcelDSLParser) parser;
			typedParser.entryRuleExcel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ExcelDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ExcelDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
