/*
* generated by Xtext
*/
grammar InternalExcelDSL;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.br.excel.exceldsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.br.excel.exceldsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.br.excel.exceldsl.services.ExcelDSLGrammarAccess;

}

@parser::members {

 	private ExcelDSLGrammarAccess grammarAccess;
 	
    public InternalExcelDSLParser(TokenStream input, ExcelDSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Excel";	
   	}
   	
   	@Override
   	protected ExcelDSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleExcel
entryRuleExcel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExcelRule()); }
	 iv_ruleExcel=ruleExcel 
	 { $current=$iv_ruleExcel.current; } 
	 EOF 
;

// Rule Excel
ruleExcel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExcelAccess().getStatementsStatementParserRuleCall_0_0()); 
	    }
		lv_statements_0_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExcelRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_0_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getExcelAccess().getExpressionExpressionParserRuleCall_1_0()); 
	    }
		lv_expression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExcelRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getDataTypeDataTypeParserRuleCall_0_0()); 
	    }
		lv_dataType_0_0=ruleDataType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"dataType",
        		lv_dataType_0_0, 
        		"DataType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getVariableVariableParserRuleCall_1_0()); 
	    }
		lv_variable_1_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"variable",
        		lv_variable_1_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStatementAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getExpressionExpressionParserRuleCall_3_0()); 
	    }
		lv_expression_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStatementAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getExpressionBasicExpressionParserRuleCall_0_0()); 
	    }
		lv_expression_0_0=ruleBasicExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		add(
       			$current, 
       			"expression",
        		lv_expression_0_0, 
        		"BasicExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getOperatorOperatorParserRuleCall_1_0_0()); 
	    }
		lv_operator_1_0=ruleOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_1_0, 
        		"Operator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getExpressionExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		add(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleExpressionGroup
entryRuleExpressionGroup returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionGroupRule()); }
	 iv_ruleExpressionGroup=ruleExpressionGroup 
	 { $current=$iv_ruleExpressionGroup.current; } 
	 EOF 
;

// Rule ExpressionGroup
ruleExpressionGroup returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExpressionGroupAccess().getLeftParenthesisKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getExpressionGroupAccess().getExpressionParserRuleCall_1()); 
    }
    this_Expression_1=ruleExpression
    { 
        $current = $this_Expression_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExpressionGroupAccess().getRightParenthesisKeyword_2());
    }
)
;





// Entry rule entryRuleOperator
entryRuleOperator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperatorRule()); }
	 iv_ruleOperator=ruleOperator 
	 { $current=$iv_ruleOperator.current; } 
	 EOF 
;

// Rule Operator
ruleOperator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		lv_operator_0_1=	'&&' 
    {
        newLeafNode(lv_operator_0_1, grammarAccess.getOperatorAccess().getOperatorAmpersandAmpersandKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperatorRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_0_1, null);
	    }

    |		lv_operator_0_2=	'||' 
    {
        newLeafNode(lv_operator_0_2, grammarAccess.getOperatorAccess().getOperatorVerticalLineVerticalLineKeyword_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperatorRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_0_2, null);
	    }

    |		lv_operator_0_3=	'=' 
    {
        newLeafNode(lv_operator_0_3, grammarAccess.getOperatorAccess().getOperatorEqualsSignKeyword_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperatorRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_0_3, null);
	    }

    |		lv_operator_0_4=	'+' 
    {
        newLeafNode(lv_operator_0_4, grammarAccess.getOperatorAccess().getOperatorPlusSignKeyword_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperatorRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_0_4, null);
	    }

    |		lv_operator_0_5=	'-' 
    {
        newLeafNode(lv_operator_0_5, grammarAccess.getOperatorAccess().getOperatorHyphenMinusKeyword_0_4());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperatorRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_0_5, null);
	    }

    |		lv_operator_0_6=	'*' 
    {
        newLeafNode(lv_operator_0_6, grammarAccess.getOperatorAccess().getOperatorAsteriskKeyword_0_5());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperatorRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_0_6, null);
	    }

    |		lv_operator_0_7=	'/' 
    {
        newLeafNode(lv_operator_0_7, grammarAccess.getOperatorAccess().getOperatorSolidusKeyword_0_6());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperatorRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_0_7, null);
	    }

    |		lv_operator_0_8=	'==' 
    {
        newLeafNode(lv_operator_0_8, grammarAccess.getOperatorAccess().getOperatorEqualsSignEqualsSignKeyword_0_7());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperatorRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_0_8, null);
	    }

    |		lv_operator_0_9=	'>' 
    {
        newLeafNode(lv_operator_0_9, grammarAccess.getOperatorAccess().getOperatorGreaterThanSignKeyword_0_8());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperatorRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_0_9, null);
	    }

    |		lv_operator_0_10=	'<' 
    {
        newLeafNode(lv_operator_0_10, grammarAccess.getOperatorAccess().getOperatorLessThanSignKeyword_0_9());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperatorRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_0_10, null);
	    }

    |		lv_operator_0_11=	'>=' 
    {
        newLeafNode(lv_operator_0_11, grammarAccess.getOperatorAccess().getOperatorGreaterThanSignEqualsSignKeyword_0_10());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperatorRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_0_11, null);
	    }

    |		lv_operator_0_12=	'<=' 
    {
        newLeafNode(lv_operator_0_12, grammarAccess.getOperatorAccess().getOperatorLessThanSignEqualsSignKeyword_0_11());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperatorRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_0_12, null);
	    }

    |		lv_operator_0_13=	'!=' 
    {
        newLeafNode(lv_operator_0_13, grammarAccess.getOperatorAccess().getOperatorExclamationMarkEqualsSignKeyword_0_12());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperatorRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_0_13, null);
	    }

)

)
)
;





// Entry rule entryRuleBasicExpression
entryRuleBasicExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBasicExpressionRule()); }
	 iv_ruleBasicExpression=ruleBasicExpression 
	 { $current=$iv_ruleBasicExpression.current; } 
	 EOF 
;

// Rule BasicExpression
ruleBasicExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBasicExpressionAccess().getPrimitivePrimitiveParserRuleCall_0_0()); 
	    }
		lv_primitive_0_0=rulePrimitive		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasicExpressionRule());
	        }
       		set(
       			$current, 
       			"primitive",
        		lv_primitive_0_0, 
        		"Primitive");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getBasicExpressionAccess().getVariableVariableParserRuleCall_1_0()); 
	    }
		lv_variable_1_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasicExpressionRule());
	        }
       		set(
       			$current, 
       			"variable",
        		lv_variable_1_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getBasicExpressionAccess().getInBuiltFunctionCallInBuiltFunctionCallParserRuleCall_2_0()); 
	    }
		lv_inBuiltFunctionCall_2_0=ruleInBuiltFunctionCall		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasicExpressionRule());
	        }
       		set(
       			$current, 
       			"inBuiltFunctionCall",
        		lv_inBuiltFunctionCall_2_0, 
        		"InBuiltFunctionCall");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getBasicExpressionAccess().getJavaClassJavaClassParserRuleCall_3_0()); 
	    }
		lv_javaClass_3_0=ruleJavaClass		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasicExpressionRule());
	        }
       		set(
       			$current, 
       			"javaClass",
        		lv_javaClass_3_0, 
        		"JavaClass");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getBasicExpressionAccess().getExpressionGroupExpressionGroupParserRuleCall_4_0()); 
	    }
		lv_expressionGroup_4_0=ruleExpressionGroup		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasicExpressionRule());
	        }
       		set(
       			$current, 
       			"expressionGroup",
        		lv_expressionGroup_4_0, 
        		"ExpressionGroup");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulePrimitive
entryRulePrimitive returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimitiveRule()); }
	 iv_rulePrimitive=rulePrimitive 
	 { $current=$iv_rulePrimitive.current; } 
	 EOF 
;

// Rule Primitive
rulePrimitive returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPrimitiveAccess().getStrValueStringValParserRuleCall_0_0()); 
	    }
		lv_strValue_0_0=ruleStringVal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimitiveRule());
	        }
       		set(
       			$current, 
       			"strValue",
        		lv_strValue_0_0, 
        		"StringVal");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimitiveAccess().getIntValueIntValParserRuleCall_1_0()); 
	    }
		lv_intValue_1_0=ruleIntVal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimitiveRule());
	        }
       		set(
       			$current, 
       			"intValue",
        		lv_intValue_1_0, 
        		"IntVal");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimitiveAccess().getDoubleValueDoubleParserRuleCall_2_0()); 
	    }
		lv_doubleValue_2_0=ruleDouble		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimitiveRule());
	        }
       		set(
       			$current, 
       			"doubleValue",
        		lv_doubleValue_2_0, 
        		"Double");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimitiveAccess().getFloatValueFloatParserRuleCall_3_0()); 
	    }
		lv_floatValue_3_0=ruleFloat		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimitiveRule());
	        }
       		set(
       			$current, 
       			"floatValue",
        		lv_floatValue_3_0, 
        		"Float");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimitiveAccess().getBooleanValueBooleanParserRuleCall_4_0()); 
	    }
		lv_booleanValue_4_0=ruleBoolean		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimitiveRule());
	        }
       		set(
       			$current, 
       			"booleanValue",
        		lv_booleanValue_4_0, 
        		"Boolean");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleStringVal
entryRuleStringVal returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringValRule()); } 
	 iv_ruleStringVal=ruleStringVal 
	 { $current=$iv_ruleStringVal.current.getText(); }  
	 EOF 
;

// Rule StringVal
ruleStringVal returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getStringValAccess().getSTRINGTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleIntVal
entryRuleIntVal returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntValRule()); } 
	 iv_ruleIntVal=ruleIntVal 
	 { $current=$iv_ruleIntVal.current.getText(); }  
	 EOF 
;

// Rule IntVal
ruleIntVal returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getIntValAccess().getINTTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleDouble
entryRuleDouble returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDoubleRule()); } 
	 iv_ruleDouble=ruleDouble 
	 { $current=$iv_ruleDouble.current.getText(); }  
	 EOF 
;

// Rule Double
ruleDouble returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getDoubleAccess().getINTTerminalRuleCall_0()); 
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDoubleAccess().getFullStopKeyword_1()); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getDoubleAccess().getINTTerminalRuleCall_2()); 
    }
)
    ;





// Entry rule entryRuleFloat
entryRuleFloat returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFloatRule()); } 
	 iv_ruleFloat=ruleFloat 
	 { $current=$iv_ruleFloat.current.getText(); }  
	 EOF 
;

// Rule Float
ruleFloat returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getFloatAccess().getINTTerminalRuleCall_0()); 
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFloatAccess().getFullStopKeyword_1()); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getFloatAccess().getINTTerminalRuleCall_2()); 
    }
(
	kw='L' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFloatAccess().getLKeyword_3_0()); 
    }

    |
	kw='l' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFloatAccess().getLKeyword_3_1()); 
    }
))
    ;





// Entry rule entryRuleBoolean
entryRuleBoolean returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanRule()); } 
	 iv_ruleBoolean=ruleBoolean 
	 { $current=$iv_ruleBoolean.current.getText(); }  
	 EOF 
;

// Rule Boolean
ruleBoolean returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='true' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBooleanAccess().getTrueKeyword_0()); 
    }

    |
	kw='false' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBooleanAccess().getFalseKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleDataType
entryRuleDataType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDataTypeRule()); }
	 iv_ruleDataType=ruleDataType 
	 { $current=$iv_ruleDataType.current; } 
	 EOF 
;

// Rule DataType
ruleDataType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		lv_datatype_0_1=	'boolean' 
    {
        newLeafNode(lv_datatype_0_1, grammarAccess.getDataTypeAccess().getDatatypeBooleanKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataTypeRule());
	        }
       		setWithLastConsumed($current, "datatype", lv_datatype_0_1, null);
	    }

    |		lv_datatype_0_2=	'int' 
    {
        newLeafNode(lv_datatype_0_2, grammarAccess.getDataTypeAccess().getDatatypeIntKeyword_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataTypeRule());
	        }
       		setWithLastConsumed($current, "datatype", lv_datatype_0_2, null);
	    }

    |		lv_datatype_0_3=	'long' 
    {
        newLeafNode(lv_datatype_0_3, grammarAccess.getDataTypeAccess().getDatatypeLongKeyword_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataTypeRule());
	        }
       		setWithLastConsumed($current, "datatype", lv_datatype_0_3, null);
	    }

    |		lv_datatype_0_4=	'float' 
    {
        newLeafNode(lv_datatype_0_4, grammarAccess.getDataTypeAccess().getDatatypeFloatKeyword_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataTypeRule());
	        }
       		setWithLastConsumed($current, "datatype", lv_datatype_0_4, null);
	    }

    |		lv_datatype_0_5=	'double' 
    {
        newLeafNode(lv_datatype_0_5, grammarAccess.getDataTypeAccess().getDatatypeDoubleKeyword_0_4());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataTypeRule());
	        }
       		setWithLastConsumed($current, "datatype", lv_datatype_0_5, null);
	    }

    |		lv_datatype_0_6=	'Boolean' 
    {
        newLeafNode(lv_datatype_0_6, grammarAccess.getDataTypeAccess().getDatatypeBooleanKeyword_0_5());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataTypeRule());
	        }
       		setWithLastConsumed($current, "datatype", lv_datatype_0_6, null);
	    }

    |		lv_datatype_0_7=	'Integer' 
    {
        newLeafNode(lv_datatype_0_7, grammarAccess.getDataTypeAccess().getDatatypeIntegerKeyword_0_6());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataTypeRule());
	        }
       		setWithLastConsumed($current, "datatype", lv_datatype_0_7, null);
	    }

    |		lv_datatype_0_8=	'Long' 
    {
        newLeafNode(lv_datatype_0_8, grammarAccess.getDataTypeAccess().getDatatypeLongKeyword_0_7());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataTypeRule());
	        }
       		setWithLastConsumed($current, "datatype", lv_datatype_0_8, null);
	    }

    |		lv_datatype_0_9=	'Float' 
    {
        newLeafNode(lv_datatype_0_9, grammarAccess.getDataTypeAccess().getDatatypeFloatKeyword_0_8());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataTypeRule());
	        }
       		setWithLastConsumed($current, "datatype", lv_datatype_0_9, null);
	    }

    |		lv_datatype_0_10=	'Double' 
    {
        newLeafNode(lv_datatype_0_10, grammarAccess.getDataTypeAccess().getDatatypeDoubleKeyword_0_9());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataTypeRule());
	        }
       		setWithLastConsumed($current, "datatype", lv_datatype_0_10, null);
	    }

    |		lv_datatype_0_11=	'String' 
    {
        newLeafNode(lv_datatype_0_11, grammarAccess.getDataTypeAccess().getDatatypeStringKeyword_0_10());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataTypeRule());
	        }
       		setWithLastConsumed($current, "datatype", lv_datatype_0_11, null);
	    }

    |		lv_datatype_0_12=	'Object' 
    {
        newLeafNode(lv_datatype_0_12, grammarAccess.getDataTypeAccess().getDatatypeObjectKeyword_0_11());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataTypeRule());
	        }
       		setWithLastConsumed($current, "datatype", lv_datatype_0_12, null);
	    }

    |		lv_datatype_0_13=	'short' 
    {
        newLeafNode(lv_datatype_0_13, grammarAccess.getDataTypeAccess().getDatatypeShortKeyword_0_12());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataTypeRule());
	        }
       		setWithLastConsumed($current, "datatype", lv_datatype_0_13, null);
	    }

    |		lv_datatype_0_14=	'Short' 
    {
        newLeafNode(lv_datatype_0_14, grammarAccess.getDataTypeAccess().getDatatypeShortKeyword_0_13());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataTypeRule());
	        }
       		setWithLastConsumed($current, "datatype", lv_datatype_0_14, null);
	    }

    |		lv_datatype_0_15=	'byte' 
    {
        newLeafNode(lv_datatype_0_15, grammarAccess.getDataTypeAccess().getDatatypeByteKeyword_0_14());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataTypeRule());
	        }
       		setWithLastConsumed($current, "datatype", lv_datatype_0_15, null);
	    }

    |		lv_datatype_0_16=	'Byte' 
    {
        newLeafNode(lv_datatype_0_16, grammarAccess.getDataTypeAccess().getDatatypeByteKeyword_0_15());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataTypeRule());
	        }
       		setWithLastConsumed($current, "datatype", lv_datatype_0_16, null);
	    }

    |		lv_datatype_0_17=	'char' 
    {
        newLeafNode(lv_datatype_0_17, grammarAccess.getDataTypeAccess().getDatatypeCharKeyword_0_16());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataTypeRule());
	        }
       		setWithLastConsumed($current, "datatype", lv_datatype_0_17, null);
	    }

    |		lv_datatype_0_18=	'Charater' 
    {
        newLeafNode(lv_datatype_0_18, grammarAccess.getDataTypeAccess().getDatatypeCharaterKeyword_0_17());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataTypeRule());
	        }
       		setWithLastConsumed($current, "datatype", lv_datatype_0_18, null);
	    }

)

)
)
;





// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	 iv_ruleVariable=ruleVariable 
	 { $current=$iv_ruleVariable.current; } 
	 EOF 
;

// Rule Variable
ruleVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_variableName_0_0=RULE_ID
		{
			newLeafNode(lv_variableName_0_0, grammarAccess.getVariableAccess().getVariableNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"variableName",
        		lv_variableName_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleInBuiltFunctionCall
entryRuleInBuiltFunctionCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInBuiltFunctionCallRule()); }
	 iv_ruleInBuiltFunctionCall=ruleInBuiltFunctionCall 
	 { $current=$iv_ruleInBuiltFunctionCall.current; } 
	 EOF 
;

// Rule InBuiltFunctionCall
ruleInBuiltFunctionCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getInBuiltFunctionCallAccess().getExcelFunctionExcelFunctionParserRuleCall_0_0()); 
	    }
		lv_excelFunction_0_0=ruleExcelFunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInBuiltFunctionCallRule());
	        }
       		set(
       			$current, 
       			"excelFunction",
        		lv_excelFunction_0_0, 
        		"ExcelFunction");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInBuiltFunctionCallAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInBuiltFunctionCallAccess().getFunctionParametersFunctionParametersParserRuleCall_2_0()); 
	    }
		lv_functionParameters_2_0=ruleFunctionParameters		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInBuiltFunctionCallRule());
	        }
       		set(
       			$current, 
       			"functionParameters",
        		lv_functionParameters_2_0, 
        		"FunctionParameters");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getInBuiltFunctionCallAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleExcelFunction
entryRuleExcelFunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExcelFunctionRule()); }
	 iv_ruleExcelFunction=ruleExcelFunction 
	 { $current=$iv_ruleExcelFunction.current; } 
	 EOF 
;

// Rule ExcelFunction
ruleExcelFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_excelFunctionName_0_0=RULE_ID
		{
			newLeafNode(lv_excelFunctionName_0_0, grammarAccess.getExcelFunctionAccess().getExcelFunctionNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExcelFunctionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"excelFunctionName",
        		lv_excelFunctionName_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleJavaClass
entryRuleJavaClass returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJavaClassRule()); }
	 iv_ruleJavaClass=ruleJavaClass 
	 { $current=$iv_ruleJavaClass.current; } 
	 EOF 
;

// Rule JavaClass
ruleJavaClass returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_javaObjectName_0_0=RULE_ID
		{
			newLeafNode(lv_javaObjectName_0_0, grammarAccess.getJavaClassAccess().getJavaObjectNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getJavaClassRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"javaObjectName",
        		lv_javaObjectName_0_0, 
        		"ID");
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getJavaClassAccess().getJavaMemberCallJavaMemberCallParserRuleCall_1_0_0()); 
	    }
		lv_javaMemberCall_1_0=ruleJavaMemberCall		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJavaClassRule());
	        }
       		set(
       			$current, 
       			"javaMemberCall",
        		lv_javaMemberCall_1_0, 
        		"JavaMemberCall");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getJavaClassAccess().getJavaMethodCallJavaMethodCallParserRuleCall_1_1_0()); 
	    }
		lv_javaMethodCall_2_0=ruleJavaMethodCall		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJavaClassRule());
	        }
       		set(
       			$current, 
       			"javaMethodCall",
        		lv_javaMethodCall_2_0, 
        		"JavaMethodCall");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleJavaMemberCall
entryRuleJavaMemberCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJavaMemberCallRule()); }
	 iv_ruleJavaMemberCall=ruleJavaMemberCall 
	 { $current=$iv_ruleJavaMemberCall.current; } 
	 EOF 
;

// Rule JavaMemberCall
ruleJavaMemberCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='.' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getJavaMemberCallAccess().getFullStopKeyword_0());
    }
(
(
		lv_accessName_1_0=RULE_ID
		{
			newLeafNode(lv_accessName_1_0, grammarAccess.getJavaMemberCallAccess().getAccessNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getJavaMemberCallRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"accessName",
        		lv_accessName_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleJavaMethodCall
entryRuleJavaMethodCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJavaMethodCallRule()); }
	 iv_ruleJavaMethodCall=ruleJavaMethodCall 
	 { $current=$iv_ruleJavaMethodCall.current; } 
	 EOF 
;

// Rule JavaMethodCall
ruleJavaMethodCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='.' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getJavaMethodCallAccess().getFullStopKeyword_0());
    }
(
(
		lv_accessName_1_0=RULE_ID
		{
			newLeafNode(lv_accessName_1_0, grammarAccess.getJavaMethodCallAccess().getAccessNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getJavaMethodCallRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"accessName",
        		lv_accessName_1_0, 
        		"ID");
	    }

)
)(	otherlv_2='.' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getJavaMethodCallAccess().getFullStopKeyword_2_0());
    }
(
(
		lv_accessName_3_0=RULE_ID
		{
			newLeafNode(lv_accessName_3_0, grammarAccess.getJavaMethodCallAccess().getAccessNameIDTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getJavaMethodCallRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"accessName",
        		lv_accessName_3_0, 
        		"ID");
	    }

)
))*	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getJavaMethodCallAccess().getLeftParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJavaMethodCallAccess().getFunctionParametersFunctionParametersParserRuleCall_4_0()); 
	    }
		lv_functionParameters_5_0=ruleFunctionParameters		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJavaMethodCallRule());
	        }
       		set(
       			$current, 
       			"functionParameters",
        		lv_functionParameters_5_0, 
        		"FunctionParameters");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getJavaMethodCallAccess().getRightParenthesisKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJavaMethodCallAccess().getJavaMethodCallJavaMethodCallParserRuleCall_6_0()); 
	    }
		lv_javaMethodCall_7_0=ruleJavaMethodCall		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJavaMethodCallRule());
	        }
       		add(
       			$current, 
       			"javaMethodCall",
        		lv_javaMethodCall_7_0, 
        		"JavaMethodCall");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleFunctionParameters
entryRuleFunctionParameters returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionParametersRule()); }
	 iv_ruleFunctionParameters=ruleFunctionParameters 
	 { $current=$iv_ruleFunctionParameters.current; } 
	 EOF 
;

// Rule FunctionParameters
ruleFunctionParameters returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionParametersAccess().getParameterExpressionParserRuleCall_0_0()); 
	    }
		lv_parameter_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionParametersRule());
	        }
       		add(
       			$current, 
       			"parameter",
        		lv_parameter_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFunctionParametersAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionParametersAccess().getParameterExpressionParserRuleCall_1_1_0()); 
	    }
		lv_parameter_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionParametersRule());
	        }
       		add(
       			$current, 
       			"parameter",
        		lv_parameter_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


