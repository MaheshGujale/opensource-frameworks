/*
* generated by Xtext
*/
package org.br.excel.exceldsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ExcelDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ExcelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Excel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStatementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStatementsStatementParserRuleCall_0_0 = (RuleCall)cStatementsAssignment_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//Excel:
		//	statements+=Statement* expression=Expression?;
		public ParserRule getRule() { return rule; }

		//statements+=Statement* expression=Expression?
		public Group getGroup() { return cGroup; }

		//statements+=Statement*
		public Assignment getStatementsAssignment_0() { return cStatementsAssignment_0; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0_0() { return cStatementsStatementParserRuleCall_0_0; }

		//expression=Expression?
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDataTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDataTypeDataTypeParserRuleCall_0_0 = (RuleCall)cDataTypeAssignment_0.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableVariableParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Statement:
		//	dataType=DataType variable=Variable "=" expression=Expression ";";
		public ParserRule getRule() { return rule; }

		//dataType=DataType variable=Variable "=" expression=Expression ";"
		public Group getGroup() { return cGroup; }

		//dataType=DataType
		public Assignment getDataTypeAssignment_0() { return cDataTypeAssignment_0; }

		//DataType
		public RuleCall getDataTypeDataTypeParserRuleCall_0_0() { return cDataTypeDataTypeParserRuleCall_0_0; }

		//variable=Variable
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }

		//Variable
		public RuleCall getVariableVariableParserRuleCall_1_0() { return cVariableVariableParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//expression=Expression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionBasicExpressionParserRuleCall_0_0 = (RuleCall)cExpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOperatorOperatorParserRuleCall_1_0_0 = (RuleCall)cOperatorAssignment_1_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		
		//Expression:
		//	expression+=BasicExpression (operator=Operator expression+=Expression)?;
		public ParserRule getRule() { return rule; }

		//expression+=BasicExpression (operator=Operator expression+=Expression)?
		public Group getGroup() { return cGroup; }

		//expression+=BasicExpression
		public Assignment getExpressionAssignment_0() { return cExpressionAssignment_0; }

		//BasicExpression
		public RuleCall getExpressionBasicExpressionParserRuleCall_0_0() { return cExpressionBasicExpressionParserRuleCall_0_0; }

		//(operator=Operator expression+=Expression)?
		public Group getGroup_1() { return cGroup_1; }

		//operator=Operator
		public Assignment getOperatorAssignment_1_0() { return cOperatorAssignment_1_0; }

		//Operator
		public RuleCall getOperatorOperatorParserRuleCall_1_0_0() { return cOperatorOperatorParserRuleCall_1_0_0; }

		//expression+=Expression
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_1_0() { return cExpressionExpressionParserRuleCall_1_1_0; }
	}

	public class ExpressionGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ExpressionGroup:
		//	"(" Expression ")";
		public ParserRule getRule() { return rule; }

		//"(" Expression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class OperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Operator");
		private final Assignment cOperatorAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOperatorAlternatives_0 = (Alternatives)cOperatorAssignment.eContents().get(0);
		private final Keyword cOperatorAmpersandAmpersandKeyword_0_0 = (Keyword)cOperatorAlternatives_0.eContents().get(0);
		private final Keyword cOperatorVerticalLineVerticalLineKeyword_0_1 = (Keyword)cOperatorAlternatives_0.eContents().get(1);
		private final Keyword cOperatorEqualsSignKeyword_0_2 = (Keyword)cOperatorAlternatives_0.eContents().get(2);
		private final Keyword cOperatorPlusSignKeyword_0_3 = (Keyword)cOperatorAlternatives_0.eContents().get(3);
		private final Keyword cOperatorHyphenMinusKeyword_0_4 = (Keyword)cOperatorAlternatives_0.eContents().get(4);
		private final Keyword cOperatorAsteriskKeyword_0_5 = (Keyword)cOperatorAlternatives_0.eContents().get(5);
		private final Keyword cOperatorSolidusKeyword_0_6 = (Keyword)cOperatorAlternatives_0.eContents().get(6);
		private final Keyword cOperatorEqualsSignEqualsSignKeyword_0_7 = (Keyword)cOperatorAlternatives_0.eContents().get(7);
		private final Keyword cOperatorGreaterThanSignKeyword_0_8 = (Keyword)cOperatorAlternatives_0.eContents().get(8);
		private final Keyword cOperatorLessThanSignKeyword_0_9 = (Keyword)cOperatorAlternatives_0.eContents().get(9);
		private final Keyword cOperatorGreaterThanSignEqualsSignKeyword_0_10 = (Keyword)cOperatorAlternatives_0.eContents().get(10);
		private final Keyword cOperatorLessThanSignEqualsSignKeyword_0_11 = (Keyword)cOperatorAlternatives_0.eContents().get(11);
		private final Keyword cOperatorExclamationMarkEqualsSignKeyword_0_12 = (Keyword)cOperatorAlternatives_0.eContents().get(12);
		
		//Operator:
		//	operator=("&&" | "||" | "=" | "+" | "-" | "*" | "/" | "==" | ">" | "<" | ">=" | "<=" | "!=");
		public ParserRule getRule() { return rule; }

		//operator=("&&" | "||" | "=" | "+" | "-" | "*" | "/" | "==" | ">" | "<" | ">=" | "<=" | "!=")
		public Assignment getOperatorAssignment() { return cOperatorAssignment; }

		//"&&" | "||" | "=" | "+" | "-" | "*" | "/" | "==" | ">" | "<" | ">=" | "<=" | "!="
		public Alternatives getOperatorAlternatives_0() { return cOperatorAlternatives_0; }

		//"&&"
		public Keyword getOperatorAmpersandAmpersandKeyword_0_0() { return cOperatorAmpersandAmpersandKeyword_0_0; }

		//"||"
		public Keyword getOperatorVerticalLineVerticalLineKeyword_0_1() { return cOperatorVerticalLineVerticalLineKeyword_0_1; }

		//"="
		public Keyword getOperatorEqualsSignKeyword_0_2() { return cOperatorEqualsSignKeyword_0_2; }

		//"+"
		public Keyword getOperatorPlusSignKeyword_0_3() { return cOperatorPlusSignKeyword_0_3; }

		//"-"
		public Keyword getOperatorHyphenMinusKeyword_0_4() { return cOperatorHyphenMinusKeyword_0_4; }

		//"*"
		public Keyword getOperatorAsteriskKeyword_0_5() { return cOperatorAsteriskKeyword_0_5; }

		//"/"
		public Keyword getOperatorSolidusKeyword_0_6() { return cOperatorSolidusKeyword_0_6; }

		//"=="
		public Keyword getOperatorEqualsSignEqualsSignKeyword_0_7() { return cOperatorEqualsSignEqualsSignKeyword_0_7; }

		//">"
		public Keyword getOperatorGreaterThanSignKeyword_0_8() { return cOperatorGreaterThanSignKeyword_0_8; }

		//"<"
		public Keyword getOperatorLessThanSignKeyword_0_9() { return cOperatorLessThanSignKeyword_0_9; }

		//">="
		public Keyword getOperatorGreaterThanSignEqualsSignKeyword_0_10() { return cOperatorGreaterThanSignEqualsSignKeyword_0_10; }

		//"<="
		public Keyword getOperatorLessThanSignEqualsSignKeyword_0_11() { return cOperatorLessThanSignEqualsSignKeyword_0_11; }

		//"!="
		public Keyword getOperatorExclamationMarkEqualsSignKeyword_0_12() { return cOperatorExclamationMarkEqualsSignKeyword_0_12; }
	}

	public class BasicExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BasicExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPrimitiveAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cPrimitivePrimitiveParserRuleCall_0_0 = (RuleCall)cPrimitiveAssignment_0.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cVariableVariableParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Assignment cInBuiltFunctionCallAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cInBuiltFunctionCallInBuiltFunctionCallParserRuleCall_2_0 = (RuleCall)cInBuiltFunctionCallAssignment_2.eContents().get(0);
		private final Assignment cJavaClassAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cJavaClassJavaClassParserRuleCall_3_0 = (RuleCall)cJavaClassAssignment_3.eContents().get(0);
		private final Assignment cExpressionGroupAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cExpressionGroupExpressionGroupParserRuleCall_4_0 = (RuleCall)cExpressionGroupAssignment_4.eContents().get(0);
		
		//BasicExpression:
		//	primitive=Primitive | variable=Variable | inBuiltFunctionCall=InBuiltFunctionCall | javaClass=JavaClass |
		//	expressionGroup=ExpressionGroup;
		public ParserRule getRule() { return rule; }

		//primitive=Primitive | variable=Variable | inBuiltFunctionCall=InBuiltFunctionCall | javaClass=JavaClass |
		//expressionGroup=ExpressionGroup
		public Alternatives getAlternatives() { return cAlternatives; }

		//primitive=Primitive
		public Assignment getPrimitiveAssignment_0() { return cPrimitiveAssignment_0; }

		//Primitive
		public RuleCall getPrimitivePrimitiveParserRuleCall_0_0() { return cPrimitivePrimitiveParserRuleCall_0_0; }

		//variable=Variable
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }

		//Variable
		public RuleCall getVariableVariableParserRuleCall_1_0() { return cVariableVariableParserRuleCall_1_0; }

		//inBuiltFunctionCall=InBuiltFunctionCall
		public Assignment getInBuiltFunctionCallAssignment_2() { return cInBuiltFunctionCallAssignment_2; }

		//InBuiltFunctionCall
		public RuleCall getInBuiltFunctionCallInBuiltFunctionCallParserRuleCall_2_0() { return cInBuiltFunctionCallInBuiltFunctionCallParserRuleCall_2_0; }

		//javaClass=JavaClass
		public Assignment getJavaClassAssignment_3() { return cJavaClassAssignment_3; }

		//JavaClass
		public RuleCall getJavaClassJavaClassParserRuleCall_3_0() { return cJavaClassJavaClassParserRuleCall_3_0; }

		//expressionGroup=ExpressionGroup
		public Assignment getExpressionGroupAssignment_4() { return cExpressionGroupAssignment_4; }

		//ExpressionGroup
		public RuleCall getExpressionGroupExpressionGroupParserRuleCall_4_0() { return cExpressionGroupExpressionGroupParserRuleCall_4_0; }
	}

	public class PrimitiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Primitive");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStrValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cStrValueStringValParserRuleCall_0_0 = (RuleCall)cStrValueAssignment_0.eContents().get(0);
		private final Assignment cIntValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cIntValueIntValParserRuleCall_1_0 = (RuleCall)cIntValueAssignment_1.eContents().get(0);
		private final Assignment cDoubleValueAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cDoubleValueDoubleParserRuleCall_2_0 = (RuleCall)cDoubleValueAssignment_2.eContents().get(0);
		private final Assignment cFloatValueAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cFloatValueFloatParserRuleCall_3_0 = (RuleCall)cFloatValueAssignment_3.eContents().get(0);
		private final Assignment cBooleanValueAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cBooleanValueBooleanParserRuleCall_4_0 = (RuleCall)cBooleanValueAssignment_4.eContents().get(0);
		
		//Primitive:
		//	strValue=StringVal | intValue=IntVal | doubleValue=Double | floatValue=Float | booleanValue=Boolean;
		public ParserRule getRule() { return rule; }

		//strValue=StringVal | intValue=IntVal | doubleValue=Double | floatValue=Float | booleanValue=Boolean
		public Alternatives getAlternatives() { return cAlternatives; }

		//strValue=StringVal
		public Assignment getStrValueAssignment_0() { return cStrValueAssignment_0; }

		//StringVal
		public RuleCall getStrValueStringValParserRuleCall_0_0() { return cStrValueStringValParserRuleCall_0_0; }

		//intValue=IntVal
		public Assignment getIntValueAssignment_1() { return cIntValueAssignment_1; }

		//IntVal
		public RuleCall getIntValueIntValParserRuleCall_1_0() { return cIntValueIntValParserRuleCall_1_0; }

		//doubleValue=Double
		public Assignment getDoubleValueAssignment_2() { return cDoubleValueAssignment_2; }

		//Double
		public RuleCall getDoubleValueDoubleParserRuleCall_2_0() { return cDoubleValueDoubleParserRuleCall_2_0; }

		//floatValue=Float
		public Assignment getFloatValueAssignment_3() { return cFloatValueAssignment_3; }

		//Float
		public RuleCall getFloatValueFloatParserRuleCall_3_0() { return cFloatValueFloatParserRuleCall_3_0; }

		//booleanValue=Boolean
		public Assignment getBooleanValueAssignment_4() { return cBooleanValueAssignment_4; }

		//Boolean
		public RuleCall getBooleanValueBooleanParserRuleCall_4_0() { return cBooleanValueBooleanParserRuleCall_4_0; }
	}

	public class StringValElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringVal");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//StringVal:
		//	STRING;
		public ParserRule getRule() { return rule; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}

	public class IntValElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntVal");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//IntVal:
		//	INT;
		public ParserRule getRule() { return rule; }

		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}

	public class DoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Double");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Double:
		//	INT "." INT;
		public ParserRule getRule() { return rule; }

		//INT "." INT
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}

	public class FloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Float");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cLKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Keyword cLKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		
		//Float:
		//	INT "." INT ("L" | "l");
		public ParserRule getRule() { return rule; }

		//INT "." INT ("L" | "l")
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }

		//"L" | "l"
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//"L"
		public Keyword getLKeyword_3_0() { return cLKeyword_3_0; }

		//"l"
		public Keyword getLKeyword_3_1() { return cLKeyword_3_1; }
	}

	public class BooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Boolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Boolean:
		//	"true" | "false";
		public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataType");
		private final Assignment cDatatypeAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cDatatypeAlternatives_0 = (Alternatives)cDatatypeAssignment.eContents().get(0);
		private final Keyword cDatatypeBooleanKeyword_0_0 = (Keyword)cDatatypeAlternatives_0.eContents().get(0);
		private final Keyword cDatatypeIntKeyword_0_1 = (Keyword)cDatatypeAlternatives_0.eContents().get(1);
		private final Keyword cDatatypeLongKeyword_0_2 = (Keyword)cDatatypeAlternatives_0.eContents().get(2);
		private final Keyword cDatatypeFloatKeyword_0_3 = (Keyword)cDatatypeAlternatives_0.eContents().get(3);
		private final Keyword cDatatypeDoubleKeyword_0_4 = (Keyword)cDatatypeAlternatives_0.eContents().get(4);
		private final Keyword cDatatypeBooleanKeyword_0_5 = (Keyword)cDatatypeAlternatives_0.eContents().get(5);
		private final Keyword cDatatypeIntegerKeyword_0_6 = (Keyword)cDatatypeAlternatives_0.eContents().get(6);
		private final Keyword cDatatypeLongKeyword_0_7 = (Keyword)cDatatypeAlternatives_0.eContents().get(7);
		private final Keyword cDatatypeFloatKeyword_0_8 = (Keyword)cDatatypeAlternatives_0.eContents().get(8);
		private final Keyword cDatatypeDoubleKeyword_0_9 = (Keyword)cDatatypeAlternatives_0.eContents().get(9);
		private final Keyword cDatatypeStringKeyword_0_10 = (Keyword)cDatatypeAlternatives_0.eContents().get(10);
		private final Keyword cDatatypeObjectKeyword_0_11 = (Keyword)cDatatypeAlternatives_0.eContents().get(11);
		private final Keyword cDatatypeShortKeyword_0_12 = (Keyword)cDatatypeAlternatives_0.eContents().get(12);
		private final Keyword cDatatypeShortKeyword_0_13 = (Keyword)cDatatypeAlternatives_0.eContents().get(13);
		private final Keyword cDatatypeByteKeyword_0_14 = (Keyword)cDatatypeAlternatives_0.eContents().get(14);
		private final Keyword cDatatypeByteKeyword_0_15 = (Keyword)cDatatypeAlternatives_0.eContents().get(15);
		private final Keyword cDatatypeCharKeyword_0_16 = (Keyword)cDatatypeAlternatives_0.eContents().get(16);
		private final Keyword cDatatypeCharaterKeyword_0_17 = (Keyword)cDatatypeAlternatives_0.eContents().get(17);
		
		//DataType:
		//	datatype=("boolean" | "int" | "long" | "float" | "double" | "Boolean" | "Integer" | "Long" | "Float" | "Double" |
		//	"String" | "Object" | "short" | "Short" | "byte" | "Byte" | "char" | "Charater");
		public ParserRule getRule() { return rule; }

		//datatype=("boolean" | "int" | "long" | "float" | "double" | "Boolean" | "Integer" | "Long" | "Float" | "Double" |
		//"String" | "Object" | "short" | "Short" | "byte" | "Byte" | "char" | "Charater")
		public Assignment getDatatypeAssignment() { return cDatatypeAssignment; }

		//"boolean" | "int" | "long" | "float" | "double" | "Boolean" | "Integer" | "Long" | "Float" | "Double" | "String" |
		//"Object" | "short" | "Short" | "byte" | "Byte" | "char" | "Charater"
		public Alternatives getDatatypeAlternatives_0() { return cDatatypeAlternatives_0; }

		//"boolean"
		public Keyword getDatatypeBooleanKeyword_0_0() { return cDatatypeBooleanKeyword_0_0; }

		//"int"
		public Keyword getDatatypeIntKeyword_0_1() { return cDatatypeIntKeyword_0_1; }

		//"long"
		public Keyword getDatatypeLongKeyword_0_2() { return cDatatypeLongKeyword_0_2; }

		//"float"
		public Keyword getDatatypeFloatKeyword_0_3() { return cDatatypeFloatKeyword_0_3; }

		//"double"
		public Keyword getDatatypeDoubleKeyword_0_4() { return cDatatypeDoubleKeyword_0_4; }

		//"Boolean"
		public Keyword getDatatypeBooleanKeyword_0_5() { return cDatatypeBooleanKeyword_0_5; }

		//"Integer"
		public Keyword getDatatypeIntegerKeyword_0_6() { return cDatatypeIntegerKeyword_0_6; }

		//"Long"
		public Keyword getDatatypeLongKeyword_0_7() { return cDatatypeLongKeyword_0_7; }

		//"Float"
		public Keyword getDatatypeFloatKeyword_0_8() { return cDatatypeFloatKeyword_0_8; }

		//"Double"
		public Keyword getDatatypeDoubleKeyword_0_9() { return cDatatypeDoubleKeyword_0_9; }

		//"String"
		public Keyword getDatatypeStringKeyword_0_10() { return cDatatypeStringKeyword_0_10; }

		//"Object"
		public Keyword getDatatypeObjectKeyword_0_11() { return cDatatypeObjectKeyword_0_11; }

		//"short"
		public Keyword getDatatypeShortKeyword_0_12() { return cDatatypeShortKeyword_0_12; }

		//"Short"
		public Keyword getDatatypeShortKeyword_0_13() { return cDatatypeShortKeyword_0_13; }

		//"byte"
		public Keyword getDatatypeByteKeyword_0_14() { return cDatatypeByteKeyword_0_14; }

		//"Byte"
		public Keyword getDatatypeByteKeyword_0_15() { return cDatatypeByteKeyword_0_15; }

		//"char"
		public Keyword getDatatypeCharKeyword_0_16() { return cDatatypeCharKeyword_0_16; }

		//"Charater"
		public Keyword getDatatypeCharaterKeyword_0_17() { return cDatatypeCharaterKeyword_0_17; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Assignment cVariableNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cVariableNameIDTerminalRuleCall_0 = (RuleCall)cVariableNameAssignment.eContents().get(0);
		
		//Variable:
		//	variableName=ID;
		public ParserRule getRule() { return rule; }

		//variableName=ID
		public Assignment getVariableNameAssignment() { return cVariableNameAssignment; }

		//ID
		public RuleCall getVariableNameIDTerminalRuleCall_0() { return cVariableNameIDTerminalRuleCall_0; }
	}

	public class InBuiltFunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InBuiltFunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExcelFunctionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExcelFunctionExcelFunctionParserRuleCall_0_0 = (RuleCall)cExcelFunctionAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFunctionParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFunctionParametersFunctionParametersParserRuleCall_2_0 = (RuleCall)cFunctionParametersAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//InBuiltFunctionCall:
		//	excelFunction=ExcelFunction "(" functionParameters=FunctionParameters? ")";
		public ParserRule getRule() { return rule; }

		//excelFunction=ExcelFunction "(" functionParameters=FunctionParameters? ")"
		public Group getGroup() { return cGroup; }

		//excelFunction=ExcelFunction
		public Assignment getExcelFunctionAssignment_0() { return cExcelFunctionAssignment_0; }

		//ExcelFunction
		public RuleCall getExcelFunctionExcelFunctionParserRuleCall_0_0() { return cExcelFunctionExcelFunctionParserRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//functionParameters=FunctionParameters?
		public Assignment getFunctionParametersAssignment_2() { return cFunctionParametersAssignment_2; }

		//FunctionParameters
		public RuleCall getFunctionParametersFunctionParametersParserRuleCall_2_0() { return cFunctionParametersFunctionParametersParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ExcelFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExcelFunction");
		private final Assignment cExcelFunctionNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExcelFunctionNameIDTerminalRuleCall_0 = (RuleCall)cExcelFunctionNameAssignment.eContents().get(0);
		
		//ExcelFunction:
		//	excelFunctionName=ID;
		public ParserRule getRule() { return rule; }

		//excelFunctionName=ID
		public Assignment getExcelFunctionNameAssignment() { return cExcelFunctionNameAssignment; }

		//ID
		public RuleCall getExcelFunctionNameIDTerminalRuleCall_0() { return cExcelFunctionNameIDTerminalRuleCall_0; }
	}

	public class JavaClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JavaClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cJavaObjectNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cJavaObjectNameIDTerminalRuleCall_0_0 = (RuleCall)cJavaObjectNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cJavaMemberCallAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cJavaMemberCallJavaMemberCallParserRuleCall_1_0_0 = (RuleCall)cJavaMemberCallAssignment_1_0.eContents().get(0);
		private final Assignment cJavaMethodCallAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cJavaMethodCallJavaMethodCallParserRuleCall_1_1_0 = (RuleCall)cJavaMethodCallAssignment_1_1.eContents().get(0);
		
		//JavaClass:
		//	javaObjectName=ID (javaMemberCall=JavaMemberCall | javaMethodCall=JavaMethodCall);
		public ParserRule getRule() { return rule; }

		//javaObjectName=ID (javaMemberCall=JavaMemberCall | javaMethodCall=JavaMethodCall)
		public Group getGroup() { return cGroup; }

		//javaObjectName=ID
		public Assignment getJavaObjectNameAssignment_0() { return cJavaObjectNameAssignment_0; }

		//ID
		public RuleCall getJavaObjectNameIDTerminalRuleCall_0_0() { return cJavaObjectNameIDTerminalRuleCall_0_0; }

		//javaMemberCall=JavaMemberCall | javaMethodCall=JavaMethodCall
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//javaMemberCall=JavaMemberCall
		public Assignment getJavaMemberCallAssignment_1_0() { return cJavaMemberCallAssignment_1_0; }

		//JavaMemberCall
		public RuleCall getJavaMemberCallJavaMemberCallParserRuleCall_1_0_0() { return cJavaMemberCallJavaMemberCallParserRuleCall_1_0_0; }

		//javaMethodCall=JavaMethodCall
		public Assignment getJavaMethodCallAssignment_1_1() { return cJavaMethodCallAssignment_1_1; }

		//JavaMethodCall
		public RuleCall getJavaMethodCallJavaMethodCallParserRuleCall_1_1_0() { return cJavaMethodCallJavaMethodCallParserRuleCall_1_1_0; }
	}

	public class JavaMemberCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JavaMemberCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAccessNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAccessNameIDTerminalRuleCall_1_0 = (RuleCall)cAccessNameAssignment_1.eContents().get(0);
		
		//JavaMemberCall:
		//	"." accessName=ID;
		public ParserRule getRule() { return rule; }

		//"." accessName=ID
		public Group getGroup() { return cGroup; }

		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }

		//accessName=ID
		public Assignment getAccessNameAssignment_1() { return cAccessNameAssignment_1; }

		//ID
		public RuleCall getAccessNameIDTerminalRuleCall_1_0() { return cAccessNameIDTerminalRuleCall_1_0; }
	}

	public class JavaMethodCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JavaMethodCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAccessNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAccessNameIDTerminalRuleCall_1_0 = (RuleCall)cAccessNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAccessNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAccessNameIDTerminalRuleCall_2_1_0 = (RuleCall)cAccessNameAssignment_2_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFunctionParametersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFunctionParametersFunctionParametersParserRuleCall_4_0 = (RuleCall)cFunctionParametersAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cJavaMethodCallAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cJavaMethodCallJavaMethodCallParserRuleCall_6_0 = (RuleCall)cJavaMethodCallAssignment_6.eContents().get(0);
		
		//JavaMethodCall:
		//	"." accessName+=ID ("." accessName+=ID)* "(" functionParameters=FunctionParameters? ")"
		//	javaMethodCall+=JavaMethodCall*;
		public ParserRule getRule() { return rule; }

		//"." accessName+=ID ("." accessName+=ID)* "(" functionParameters=FunctionParameters? ")" javaMethodCall+=JavaMethodCall*
		public Group getGroup() { return cGroup; }

		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }

		//accessName+=ID
		public Assignment getAccessNameAssignment_1() { return cAccessNameAssignment_1; }

		//ID
		public RuleCall getAccessNameIDTerminalRuleCall_1_0() { return cAccessNameIDTerminalRuleCall_1_0; }

		//("." accessName+=ID)*
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//accessName+=ID
		public Assignment getAccessNameAssignment_2_1() { return cAccessNameAssignment_2_1; }

		//ID
		public RuleCall getAccessNameIDTerminalRuleCall_2_1_0() { return cAccessNameIDTerminalRuleCall_2_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//functionParameters=FunctionParameters?
		public Assignment getFunctionParametersAssignment_4() { return cFunctionParametersAssignment_4; }

		//FunctionParameters
		public RuleCall getFunctionParametersFunctionParametersParserRuleCall_4_0() { return cFunctionParametersFunctionParametersParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//javaMethodCall+=JavaMethodCall*
		public Assignment getJavaMethodCallAssignment_6() { return cJavaMethodCallAssignment_6; }

		//JavaMethodCall
		public RuleCall getJavaMethodCallJavaMethodCallParserRuleCall_6_0() { return cJavaMethodCallJavaMethodCallParserRuleCall_6_0; }
	}

	public class FunctionParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionParameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParameterExpressionParserRuleCall_0_0 = (RuleCall)cParameterAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParameterAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParameterExpressionParserRuleCall_1_1_0 = (RuleCall)cParameterAssignment_1_1.eContents().get(0);
		
		//FunctionParameters:
		//	parameter+=Expression ("," parameter+=Expression)*;
		public ParserRule getRule() { return rule; }

		//parameter+=Expression ("," parameter+=Expression)*
		public Group getGroup() { return cGroup; }

		//parameter+=Expression
		public Assignment getParameterAssignment_0() { return cParameterAssignment_0; }

		//Expression
		public RuleCall getParameterExpressionParserRuleCall_0_0() { return cParameterExpressionParserRuleCall_0_0; }

		//("," parameter+=Expression)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//parameter+=Expression
		public Assignment getParameterAssignment_1_1() { return cParameterAssignment_1_1; }

		//Expression
		public RuleCall getParameterExpressionParserRuleCall_1_1_0() { return cParameterExpressionParserRuleCall_1_1_0; }
	}
	
	
	private final ExcelElements pExcel;
	private final StatementElements pStatement;
	private final ExpressionElements pExpression;
	private final ExpressionGroupElements pExpressionGroup;
	private final OperatorElements pOperator;
	private final BasicExpressionElements pBasicExpression;
	private final PrimitiveElements pPrimitive;
	private final StringValElements pStringVal;
	private final IntValElements pIntVal;
	private final DoubleElements pDouble;
	private final FloatElements pFloat;
	private final BooleanElements pBoolean;
	private final DataTypeElements pDataType;
	private final VariableElements pVariable;
	private final InBuiltFunctionCallElements pInBuiltFunctionCall;
	private final ExcelFunctionElements pExcelFunction;
	private final JavaClassElements pJavaClass;
	private final JavaMemberCallElements pJavaMemberCall;
	private final JavaMethodCallElements pJavaMethodCall;
	private final FunctionParametersElements pFunctionParameters;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ExcelDSLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pExcel = new ExcelElements();
		this.pStatement = new StatementElements();
		this.pExpression = new ExpressionElements();
		this.pExpressionGroup = new ExpressionGroupElements();
		this.pOperator = new OperatorElements();
		this.pBasicExpression = new BasicExpressionElements();
		this.pPrimitive = new PrimitiveElements();
		this.pStringVal = new StringValElements();
		this.pIntVal = new IntValElements();
		this.pDouble = new DoubleElements();
		this.pFloat = new FloatElements();
		this.pBoolean = new BooleanElements();
		this.pDataType = new DataTypeElements();
		this.pVariable = new VariableElements();
		this.pInBuiltFunctionCall = new InBuiltFunctionCallElements();
		this.pExcelFunction = new ExcelFunctionElements();
		this.pJavaClass = new JavaClassElements();
		this.pJavaMemberCall = new JavaMemberCallElements();
		this.pJavaMethodCall = new JavaMethodCallElements();
		this.pFunctionParameters = new FunctionParametersElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.br.excel.exceldsl.ExcelDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Excel:
	//	statements+=Statement* expression=Expression?;
	public ExcelElements getExcelAccess() {
		return pExcel;
	}
	
	public ParserRule getExcelRule() {
		return getExcelAccess().getRule();
	}

	//Statement:
	//	dataType=DataType variable=Variable "=" expression=Expression ";";
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//Expression:
	//	expression+=BasicExpression (operator=Operator expression+=Expression)?;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//ExpressionGroup:
	//	"(" Expression ")";
	public ExpressionGroupElements getExpressionGroupAccess() {
		return pExpressionGroup;
	}
	
	public ParserRule getExpressionGroupRule() {
		return getExpressionGroupAccess().getRule();
	}

	//Operator:
	//	operator=("&&" | "||" | "=" | "+" | "-" | "*" | "/" | "==" | ">" | "<" | ">=" | "<=" | "!=");
	public OperatorElements getOperatorAccess() {
		return pOperator;
	}
	
	public ParserRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}

	//BasicExpression:
	//	primitive=Primitive | variable=Variable | inBuiltFunctionCall=InBuiltFunctionCall | javaClass=JavaClass |
	//	expressionGroup=ExpressionGroup;
	public BasicExpressionElements getBasicExpressionAccess() {
		return pBasicExpression;
	}
	
	public ParserRule getBasicExpressionRule() {
		return getBasicExpressionAccess().getRule();
	}

	//Primitive:
	//	strValue=StringVal | intValue=IntVal | doubleValue=Double | floatValue=Float | booleanValue=Boolean;
	public PrimitiveElements getPrimitiveAccess() {
		return pPrimitive;
	}
	
	public ParserRule getPrimitiveRule() {
		return getPrimitiveAccess().getRule();
	}

	//StringVal:
	//	STRING;
	public StringValElements getStringValAccess() {
		return pStringVal;
	}
	
	public ParserRule getStringValRule() {
		return getStringValAccess().getRule();
	}

	//IntVal:
	//	INT;
	public IntValElements getIntValAccess() {
		return pIntVal;
	}
	
	public ParserRule getIntValRule() {
		return getIntValAccess().getRule();
	}

	//Double:
	//	INT "." INT;
	public DoubleElements getDoubleAccess() {
		return pDouble;
	}
	
	public ParserRule getDoubleRule() {
		return getDoubleAccess().getRule();
	}

	//Float:
	//	INT "." INT ("L" | "l");
	public FloatElements getFloatAccess() {
		return pFloat;
	}
	
	public ParserRule getFloatRule() {
		return getFloatAccess().getRule();
	}

	//Boolean:
	//	"true" | "false";
	public BooleanElements getBooleanAccess() {
		return pBoolean;
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}

	//DataType:
	//	datatype=("boolean" | "int" | "long" | "float" | "double" | "Boolean" | "Integer" | "Long" | "Float" | "Double" |
	//	"String" | "Object" | "short" | "Short" | "byte" | "Byte" | "char" | "Charater");
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}

	//Variable:
	//	variableName=ID;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//InBuiltFunctionCall:
	//	excelFunction=ExcelFunction "(" functionParameters=FunctionParameters? ")";
	public InBuiltFunctionCallElements getInBuiltFunctionCallAccess() {
		return pInBuiltFunctionCall;
	}
	
	public ParserRule getInBuiltFunctionCallRule() {
		return getInBuiltFunctionCallAccess().getRule();
	}

	//ExcelFunction:
	//	excelFunctionName=ID;
	public ExcelFunctionElements getExcelFunctionAccess() {
		return pExcelFunction;
	}
	
	public ParserRule getExcelFunctionRule() {
		return getExcelFunctionAccess().getRule();
	}

	//JavaClass:
	//	javaObjectName=ID (javaMemberCall=JavaMemberCall | javaMethodCall=JavaMethodCall);
	public JavaClassElements getJavaClassAccess() {
		return pJavaClass;
	}
	
	public ParserRule getJavaClassRule() {
		return getJavaClassAccess().getRule();
	}

	//JavaMemberCall:
	//	"." accessName=ID;
	public JavaMemberCallElements getJavaMemberCallAccess() {
		return pJavaMemberCall;
	}
	
	public ParserRule getJavaMemberCallRule() {
		return getJavaMemberCallAccess().getRule();
	}

	//JavaMethodCall:
	//	"." accessName+=ID ("." accessName+=ID)* "(" functionParameters=FunctionParameters? ")"
	//	javaMethodCall+=JavaMethodCall*;
	public JavaMethodCallElements getJavaMethodCallAccess() {
		return pJavaMethodCall;
	}
	
	public ParserRule getJavaMethodCallRule() {
		return getJavaMethodCallAccess().getRule();
	}

	//FunctionParameters:
	//	parameter+=Expression ("," parameter+=Expression)*;
	public FunctionParametersElements getFunctionParametersAccess() {
		return pFunctionParameters;
	}
	
	public ParserRule getFunctionParametersRule() {
		return getFunctionParametersAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
